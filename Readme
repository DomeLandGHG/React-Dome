💰 Money Clicker - Architektur & Implementierung
Ein einfaches React-Spiel, das für Schüler ohne Programmiererfahrung erklärt wird.

🎮 Was ist das für ein Spiel?
Money Clicker ist ein einfaches Browserspiel, bei dem du:

Auf einen Button klickst, um Geld zu verdienen
Upgrades kaufst, um mehr Geld pro Klick zu bekommen
Automatische Geldgenerierung freischaltest
Ein "Rebirth"-System nutzt, um von vorne zu beginnen, aber mit Boni
🏗 Wie ist die App aufgebaut? (Architektur)
Stell dir vor, unsere App ist wie ein Haus mit verschiedenen Räumen:

📱 MONEY CLICKER APP
├── 🏠 App.tsx (Haupthaus - verbindet alle Räume)
├── 🧠 useGameLogic.ts (Das Gehirn - alle Spielregeln)
├── 💾 storage.ts (Speicher - merkt sich deinen Fortschritt)
├── 📋 types.ts (Regelwerk - definiert was erlaubt ist)
└── 🎨 components/ (Die einzelnen Räume)
    ├── 💰 MoneyButton.tsx (Der Klick-Button)
    ├── 📊 GameStats.tsx (Die Anzeige deines Geldes)
    ├── ⬆ UpgradesPanel.tsx (Der Upgrade-Shop)
    └── 🎯 ActionButtons.tsx (Rebirth & Cheat Buttons)
🔄 Wie arbeiten die Teile zusammen?
     👤 SPIELER
        |
        v
   🏠 APP.TSX (Hauptkomponente)
        |
        +-- 🧠 useGameLogic.ts ← Verwaltet alle Spielregeln
        |      |
        |      +-- 💾 storage.ts ← Speichert/Lädt Fortschritt
        |      |
        |      +-- 📋 types.ts ← Definiert Datenstrukturen
        |
        +-- 🎨 KOMPONENTEN (UI-Elemente)
            |
            +-- 💰 MoneyButton ← Geld verdienen
            +-- 📊 GameStats ← Statistiken anzeigen
            +-- ⬆ UpgradesPanel ← Upgrades kaufen
            +-- 🎯 ActionButtons ← Spezielle Aktionen
📁 Was macht welche Datei? (Einfach erklärt)
🏠 App.tsx - Das Haupthaus
Was es macht: Verbindet alle Teile der App und zeigt sie auf dem Bildschirm an.

Stell dir vor: Du bist der Hausbesitzer und entscheidest, welcher Raum wo hinkommt.

Platziert den Geld-Button in der Mitte
Zeigt die Statistiken oben an
Stellt den Upgrade-Shop rechts daneben
Sorgt dafür, dass alles schön aussieht
Wichtige Teile:

Holt sich die Spiellogik von useGameLogic
Zeigt alle Komponenten an der richtigen Stelle an
🧠 useGameLogic.ts - Das Gehirn der App
Was es macht: Enthält alle Spielregeln und verwaltet den Spielzustand.

Stell dir vor: Das ist wie ein Spielleiter, der alle Regeln kennt und aufpasst, dass alles richtig abläuft.

Wichtige Funktionen:

clickMoney(): "Du hast geklickt! +X€ für dich!"
buyUpgrade(): "Du willst ein Upgrade? Hast du genug Geld? OK, hier ist es!"
performRebirth(): "Neustart! Du bekommst Rebirth-Punkte und fängst von vorne an!"
cheatMoney(): "Entwickler-Cheat: Hier ist viel Geld!"
Automatische Funktionen:

Speichert deinen Fortschritt automatisch
Generiert jede Sekunde automatisch Geld (wenn du Upgrades hast)
💾 storage.ts - Der Speicher
Was es macht: Merkt sich deinen Spielfortschritt, auch wenn du den Browser schließt.

Stell dir vor: Das ist wie ein Tagebuch, das sich automatisch alles merkt, was du im Spiel machst.

Wichtige Funktionen:

saveGameState(): "Ich schreibe auf, wie viel Geld du hast!"
loadGameState(): "Ah, hier ist dein gespeicherter Fortschritt!"
clearGameState(): "Soll ich alles löschen und von vorne anfangen?"
📋 types.ts - Das Regelwerk
Was es macht: Definiert, welche Art von Daten erlaubt sind (wie ein Wörterbuch).

Stell dir vor: Das ist wie ein Vertrag, der genau beschreibt, was erlaubt ist.

Wichtige Definitionen:

GameState: "So sieht dein Spielstand aus: Geld, Rebirth-Punkte, Klicks..."
Upgrade: "So sieht ein Upgrade aus: Name, Preis, Effekt..."
INITIAL_GAME_STATE: "So fängst du am Anfang an: 0€, 1€ pro Klick..."
🎨 Komponenten (components/) - Die UI-Bausteine
💰 MoneyButton.tsx - Der Hauptbutton
Was es macht: Der große Button, auf den du klickst, um Geld zu verdienen.

Stell dir vor: Das ist wie ein Geldautomat - du drückst drauf und bekommst Geld!

Zeigt an, wie viel Geld du pro Klick bekommst
Sieht schön aus mit einem 💰 Symbol
Reagiert auf deine Klicks
📊 GameStats.tsx - Die Anzeige
Was es macht: Zeigt alle wichtigen Zahlen deines Spiels an.

Stell dir vor: Das ist dein Kontostand und deine Statistiken auf einem Blick:

💰 Aktuelles Geld
Pro Klick: Wie viel du pro Klick verdienst
Pro Sekunde: Wie viel automatisch generiert wird
Rebirth-Punkte: Deine "Erfahrungspunkte"
Gesamt-Klicks: Wie oft du insgesamt geklickt hast
⬆ UpgradesPanel.tsx - Der Shop
Was es macht: Hier kannst du Upgrades kaufen, um mehr Geld zu verdienen.

Stell dir vor: Das ist ein Laden, wo du bessere Ausrüstung kaufen kannst:

+1€ per Click: Jeder Klick bringt 1€ mehr
+1€ per Second: Du bekommst automatisch 1€ pro Sekunde
+10€ per Click: Jeder Klick bringt 10€ mehr
Besonderheiten:

Upgrades werden teurer, je öfter du sie kaufst
Jedes Upgrade hat ein Maximum (du kannst nicht unendlich kaufen)
Buttons zeigen grün wenn du es dir leisten kannst, rot wenn nicht
🎯 ActionButtons.tsx - Spezielle Aktionen
Was es macht: Enthält besondere Buttons für Rebirth und Cheats.

Stell dir vor: Das sind die "Power-Ups" des Spiels:

🔄 Rebirth: Fang von vorne an, aber mit Boni! (braucht 1000€+)
💎 Cheat: Entwickler-Button für schnelles Geld (zum Testen)
🔄 Datenfluss - Wie fließen die Informationen?
1. Spieler klickt auf Money Button

Klick! → MoneyButton → useGameLogic.clickMoney() → GameState wird aktualisiert → 
storage.ts speichert automatisch → Alle Komponenten bekommen neue Daten → 
Bildschirm wird aktualisiert
2. Spieler kauft ein Upgrade

Klick auf Upgrade → UpgradesPanel → useGameLogic.buyUpgrade() → 
Prüft: "Hast du genug Geld?" → Wenn ja: Geld abziehen, Upgrade aktivieren → 
GameState aktualisieren → Bildschirm aktualisieren
3. Automatische Geldgenerierung (jede Sekunde)

Timer (1 Sekunde) → useGameLogic prüft moneyPerSecond → 
Wenn > 0: Geld hinzufügen → GameState aktualisieren → Bildschirm aktualisieren
🎯 Was macht das Spiel besonders?
🔄 Rebirth-System
Wenn du 1000€+ hast, kannst du "Rebirth" machen
Du verlierst alles, aber bekommst Rebirth-Punkte
Diese Punkte machen dich in Zukunft stärker (noch nicht implementiert)
💾 Automatisches Speichern
Dein Fortschritt wird automatisch gespeichert
Beim nächsten Besuch der Seite ist alles noch da
⬆ Upgrades mit Strategie
Upgrades werden teurer, je öfter du sie kaufst
Du musst entscheiden: Lieber viel pro Klick oder automatisches Geld?
🎮 Responsive Design
Funktioniert auf Computer, Tablet und Handy
🛠 Technische Details (für Interessierte)
Frontend-Framework: React 19 mit TypeScript Build-Tool: Vite (sehr schnell!) Styling: CSS mit modernen Features Speicherung: Browser LocalStorage (lokal auf deinem Computer) State Management: React Hooks (useState, useEffect, useCallback)

Warum TypeScript?

Verhindert Fehler durch falsche Datentypen
Macht den Code selbst-dokumentierend
Bessere Entwicklerunterstützung in VS Code
Warum React Hooks?

Moderne Art, React-Apps zu schreiben
Sauberer und leichter verständlicher Code
Bessere Performance
🚀 Wie startest du das Spiel?
Terminal öffnen
npm install - Installiert alle benötigten Pakete
npm run dev - Startet den Entwicklungsserver
Browser öffnet sich automatisch mit dem Spiel!
🎓 Was kannst du daraus lernen?
Programmier-Konzepte:
Komponenten: Wie man Code in kleine, wiederverwendbare Teile aufteilt
State Management: Wie man Daten in einer App verwaltet
Events: Wie man auf Benutzereingaben reagiert
Automatisierung: Wie man Dinge automatisch ablaufen lässt
Spiel-Design:
Progression: Wie man Spieler motiviert weiterzumachen
Balance: Upgrade-Preise und -Effekte ausbalancieren
User Experience: Wie man eine App benutzerfreundlich macht
Software-Architektur:
Separation of Concerns: Jede Datei hat eine klare Aufgabe
Data Flow: Wie Daten durch die App fließen
Modularity: Wie man Code organisiert und strukturiert
Viel Spaß beim Klicken und Geld verdienen! 💰